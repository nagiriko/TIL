# database.yml
Railsアプリケーションのデータベースの設定ファイル

# 運用環境
システムをどこで使用するか定められている環境

運用環境      / 通称概要    /概要
development  / 開発環境    / 主にアプリケーションを開発をする際に使用する環境
test         / テスト環境  / アプリケーションの動作をテストする際に使用する環境
production   / 本番環境    / アプリケーションを実際にリリースする際に使用する環境

# RDB（relational database）
表形式でデータを管理するデータベースです。
行と列を持っており、データベースにおいては、行を「レコード」、列を「カラム」といいます

# RDBMS（relational database management system）
RDB（リレーショナル・データベース）を使用する際、それを管理するシステム

# MySQL
RDBMS各種には大きな差がなく、他にも同じようなRDBMSがあります。
今回MySQLを採用しているのは下記の理由もあり、多くの企業で採用されているためです。

拡張機能が多い
小規模から大規模のデータも取り扱いが可能
柔軟性が高い

# ライブラリ
他のプログラムと組み合わせて使用するために、複雑なプログラムを1つのセットにしたもの

# RubyGems
Rubyのライブラリを管理するシステムです。
Rubyのライブラリのほとんどは、RubyGemsに集められています。

#  Gem
RubyGemsにはたくさんのライブラリがあり、それぞれをGem（ジェム）と呼びます。

# Gemfile
アプリケーションで使用するGemの「名前」と「バージョン」の情報を記載し、管理するファイル

# Gemfile.lock
bundle installによってインストール済みとなったGemの情報を記録するファイル

# CRUD
アプリケーションのデータ取り扱いに関して、基本的な処理の頭文字を並べたもの
C（Create）	R（Read）	U（Update）	D（Delete）
生成	読み取り	更新	削除

index	  一覧表示
show	  詳細表示
new	    生成
create	保存
edit	  編集
update	更新
destroy	削除

# resourcesリソーシーズメソッド
resourcesは、7つのアクションへのルーティングを自動生成するメソッド
resourcesの引数に、:tweets というシンボルを指定すると/tweetsのパスに対応するルーティングが生成されます。

# onlyオンリーオプション
resourcesにオプションとしてonlyを加えると、指定したアクションのみのルーティングを自動生成します。
オプション: :追加したいアクションのようにシンボル型でアクション名を記述します。

# レイアウトテンプレート
Railsの場合、application.html.erbというファイル
app/views/layoutsディレクトリに配置

# yieldイールドメソッド
レイアウトテンプレートに、各テンプレートファイルを展開するためのメソッドです。
yieldを記述することで、indexアクションの場合はテンプレートファイルのindex.html.erbの内容が、newアクションの場合はnew.html.erbが、yield記述部分へ展開されるようになります。

# stylesheet_link_tagスタイルシート リンク タグメソッド
読み込むCSSファイルを指定できるヘルパーメソッドです。読み込みたいCSSファイルをapp/assets/stylesheets/というディレクトリに配置し、stylesheet_link_tagメソッドの引数に読み込みたいCSSファイル名を記述します。

#  application.cssアプリケーション シーエスエスファイル
Railsにはじめから用意されている、CSSファイルをまとめるためのファイル

# require_tree
require_treeは、引数として与えられたディレクトリ以下のCSSファイルをアルファベット順にすべて読み込むという機能を持ちます。

# ストロングパラメーター
ストロングパラメーターの定義には、requireメソッドと、permitメソッドを組み合わせて使用します。

# requireリクワイアメソッド
送信されたパラメーターの情報を持つparamsが、使用できるメソッドです。
requireメソッドは、パラメーターからどの情報を取得するか、選択します。

# permitパーミットメソッド
requireメソッドと同様に、paramsが使用できるメソッド

# プライベートメソッド
クラス外から呼び出すことのできないメソッドのこと

# バリデーション
データを登録する際に、一定の制約をかけること
バリデーションを設ける際は、モデルにvalidatesメソッドを記述します

# validatesバリデーツメソッド
このバリデーションを設けることで、名前が空欄の時データベースに保存できなくなります

# image_tag
imgタグを生成するためのRailsのヘルパーメソッド

# Prefix
Prefixとは、ルーティングのURI Patternに名前をつけて変数化したものです。これにより、URI Patternの代わりにPrefixを用いてパスを表現できます。

# before_actionビフォーアクションメソッド
コントローラで定義されたアクションが実行される前に、共通の処理を行うことができます。

#  rails g devise:installレイルズ ジー デバイス インストールコマンド
追加したdeviseというGemの「設定関連に使用するファイル」を自動で生成するコマンド

# rails g deviseレイルズ ジー デバイスコマンド
rails g deviseコマンドは、deviseによるユーザー機能の対象を指定することで、モデルとマイグレーションの生成やルーティングの設定などをまとめて処理します。

# rails g devise:viewsレイルズ ジー デバイス ビューズコマンド
deviseに用意されたビューファイルをコピーし、app/viewsの配下に配置してくれるコマンドです。
HTMLを修正できるため、カスタマイズ可能になります。

# スネークケースとキャメルケース
スネークケースは、単語の区切りをアンダースコアで表す
キャメルケースは、単語の区切りを大文字で表す

# maxlengthマックスレングスオプション
maxlengthオプションは、inputタグを生成するヘルパーメソッドである、 text_fieldにつけることができるオプションです。入力できる最大文字数を指定できます。

# devise_parameter_sanitizerデバイス パラメーター サニタイザーメソッド
deviseにおけるparamsのようなメソッドです。deviseのUserモデルに関わる「ログイン」「新規登録」などのリクエストからパラメーターを取得できます。

# application_controller.rbアプリケーション コントローラー アールビーファイル
ここに処理を記述しておくことで、すべてのコントローラーで共通となる処理を作ることができます。

# user_signed_in?ユーザー サインド インメソッド
Gemのdeviseを導入しているため、使用できるメソッドです。
ログインしているかどうかの判定を行います。

# redirect_toリダイレクト トゥーメソッド
Railsでリダイレクト処理を行う際に使用するメソッドです。
コントローラー等での処理が終わった後、アクションに対応するビューファイルを参照せずに、別ページへリダイレクトさせることができます。

#  exceptエクセプトオプション
before_actionで使用できるオプションです。exceptは「除外する」という意味があります。
こちらの後に指定したアクションに対しては、事前処理は実行されません。

# current_userカレント ユーザーメソッ
Gemのdeviseを導入しているため、使用できるメソッドです。
current_userは、現在ログインしているユーザーの情報を取得できます。

# mergeマージメソッド
 ハッシュを結合させるときに使用するRubyのメソッド

 #  has_manyハズ メニーメソッド
 Userモデルの視点で考えると、あるユーザーの作成した投稿は複数個ある状態です。
つまり、1人のユーザーは複数の投稿を所有しています。

# belongs_toビロングス トゥーメソッド
1つの投稿は、1人のユーザーが投稿したものです。
つまり1つの投稿を複数人が投稿できないため、投稿は必ず1人のユーザーに所属します

#  N+1エヌ プラス イチ問題
N+1問題とは、アソシエーションを利用した場合に限り、データベースへのアクセス回数が多くなってしまう問題です。
これはアプリケーションのパフォーマンス低下につながります。

# includesインクルーズメソッド
includesメソッドは、引数に指定された関連モデルを1度のアクセスでまとめて取得できます
includes(:紐付くモデル名)

# orderオーダーメソッド
モデルが使用できる、ActiveRecordメソッドの1つです。
orderメソッドは、テーブルから取得してきた複数のレコード情報を持つインスタンスの、並び順を変更するメソッドです。
ASC（昇順）	小さいものから大きいものになる。古いものから新しいのものになる
DESC（降順）	ASCの反対

# 部分テンプレート
ビューファイルにおいて繰り返し使用するコードを切り出し、再利用する仕組みのこと

#  _○○.html.erbアンダーバー エイチティーエムエルイーアールビーファイル
部分テンプレートとして切り出すときに作成するファイルです。
テンプレート自体のファイル名は、命名規則として、アンダースコア_を先頭に記述します

#  renderレンダーメソッド
部分テンプレートを呼び出す際に利用するメソッドです。
呼び出す部分テンプレートは、partialというオプションで指定します

# partialパーシャルオプション
renderメソッドで使用できるオプションです。
partialというオプションを付け、部分テンプレート名を指定することで、該当する部分テンプレートを表示できます。

# localsローカルズオプション

# whereウェアーメソッド
モデルが使用できる、ActiveRecordメソッドの1つです。
モデル.where(条件)のように、引数部分に条件を指定することで、テーブル内の「条件に一致したレコードのインスタンス」を配列の形で取得できます。

# LIKEライク句
LIKE句は、曖昧（あいまい）な文字列の検索をするときに使用するもので、whereメソッドと一緒に使います。
where('title LIKE(?)', "a%")	aから始まるタイトル
where('title LIKE(?)', "%b")	bで終わるタイトル
where('title LIKE(?)', "%c%")	cが含まれるタイトル
where('title LIKE(?)', "d_")	dで始まる2文字のタイトル
where('title LIKE(?)', "_e")	eで終わる2文字のタイトル

# デバッグ
任意でない処理（バグ）を見つけること

# pry-rails
Railsにおけるデバッグ用のGem

# NOT NULLノット ヌル制約
テーブルの属性値にNULL（空の値）が入らないように制限する制約
null: falsede

# 外部キー制約
t.references :userにforeign_key: trueと記述することで、設定できます

# チェック制約
値が保存される際に条件を満たしているかチェックできる制約


# rails_helper
Rspecを用いてRailsの機能をテストするときに、共通の設定を書いておくファイル

# describe
テストコードのグループ分けを行うメソッド

# it
describeメソッド同様に、グループ分けを行うメソッド

# example
exampleとは、itで分けたグループのこと

# bundle execバンドル エグゼクコマンド
Gemの依存関係を整理してくれるコマンド

# rspecアールスペック コマンド
specディレクトリ以下に書かれたRSpecのテストコードを実行するコマンド

# valid?
バリデーションを実行させて、エラーがあるかどうかを判断するメソッド
作成したデータが正しく保存される場合はtrueを、保存されない場合はfalseを返す
保存されない場合は「なぜ保存されないのか」のエラーメッセージを生成する

# expectation
検証で得られた挙動が想定通りなのかを確認する構文

# matcher
「expectの引数」と「想定した挙動」が一致しているかどうかを判断します。

# includeインクルード
「expectの引数」に「includeの引数」が含まれていることを確認するマッチャ

# eq
「expectの引数」と「eqの引数」が等しいことを確認するマッチャ

# errors
インスタンスにエラーを示す情報がある場合、その内容を返すメソッド

# full_messages
エラーの内容から、エラーメッセージを配列として取り出すメソッド
user.errors.full_messages

# FactoryBot
インスタンスをまとめることができるGem

# before
それぞれのテストコードを実行する前に、セットアップを行うことができます。

# Faker
ランダムな値を生成するGemです。メールアドレス、人名、パスワードなど、さまざまな意図に応じたランダムな値を生成してくれます。

# be_valid
valid?メソッドの返り値が、trueであることを期待するマッチャ

# context
contextは、特定の条件を指定してグループを分けます。
使用方法はdescribeと同じですが、describeには何についてのテストなのかを指定するのに対し、contextには特定の条件を指定します。

# Request Spec
# System Spec
結合テストコードを記述するための仕組み

# Capybara
System Specを記述するために必要なGem

# visit
「トップページに移動する」をどのように再現するかです。この時に使用するもの

# have_content
expect(page).to have_content('X')と記述すると、visitで訪れたpageの中に、Xという文字列があるかどうかを判断するマッチャです。

# fill_in
fill_in 'フォームの名前', with: '入力する文字列'のように記述することで、フォームへの入力を行うことができます

# find().click
find('クリックしたい要素').clickと記述することで、実際にクリックができます。

# change
expect{ 何かしらの動作 }.to change { モデル名.count }.by(1)と記述することによって、モデルのレコードの数がいくつ変動するのかを確認できます。changeマッチャでモデルのカウントをする場合のみ、expect()ではなくexpect{}となります。

# hover
find('ブラウザ上の要素').hoverとすることで、特定の要素にカーソルをあわせたときの動作を再現できます。

# have_no_content
have_contentの逆で、文字列が存在しないことを確かめるマッチャです。

# have_selector
指定したセレクタが存在するかどうかを判断するマッチャです。上記の例であればhave_selector ".content_post[style='background-image: url(#{@tweet_image});']"という形で記述できます。

expect('要素').to have_link 'ボタンの文字列', href: 'リンク先のパス'と記述することで、要素の中に当てはまるリンクがあることを確認できます。have_linkはa要素に対して用います。

# have_no_link
have_linkの逆で、当てはまるリンクがないことを確認します。expect('要素').to have_no_link 'ボタンの文字列', href: 'リンク先のパス'と記述することで、要素の中に当てはまるリンクがないことを確認できます。

# all
all('クラス名')でpageに存在する同名のクラスを持つ要素をまとめて取得できます。そしてall('クラス名')[0]のように添字を加えることで「◯番目のmoreクラス」を取得できます。

# have_field
inputやtextareaなどのフォーム要素が存在するかを確認するマッチャ
have_field('tweet_image')

# find_link().click
a要素で表示されているリンクをクリックするために用います。find_link('リンクの文字列', href: 'URL').clickといった形で使います。find().clickと似ていますが、find_link().clickはa要素のみに対して用いることができます。

# サポートモジュール
RSpecに用意されている、メソッド等をまとめる機能

# throughスルーオプション
has_manyメソッドのthroughオプションは、モデルに多対多の関連を定義するときに利用します。
throughという名前のとおり、「〜を経由する」という意味です。

# README
ソフトウェアの仕様、規格、インストール方法などを文書化したアプリケーションの説明書のようなファイル

# マークダウン
文書を記述するための軽量マークアップ言語のひとつ
マークダウンで記述されたものは、HTMLに変換されます。

# box-sizingボックス サイジングプロパティ
要素のボックスサイズをどのように算出するか指定できるCSSプロパティ

# labelラベル要素
フォームの中でフォームの項目名とフォームの入力要素（画像選択フォーム、プルダウン、チェックボックスなど）を関連付けるための要素

# authenticate_user!オウセンティケイト ユーザーメソッド
ログイン状態によって表示するページを切り替えるdeviseのメソッド

#  collectionコレクションオプション
指定したインスタンス変数の中にある要素の数だけ、部分テンプレートを繰り返し呼び出すことができるオプション

# application.rbアプリケーション アールビーファイル
configディレクトリに用意されている、Railsアプリケーションの設定ファイルです。
application.rbファイルには、そのRailsアプリケーションの開発環境すべてにおいて共通となる設定を記述します

# lエルメソッド
l（エル）メソッドは、日付や時刻を表示するRailsのメソッドです。
国や地域によって時刻は異なりますが、lメソッドを使えば指定した現地時間に対応できます。

# dependentディペンデントオプション
親モデルを削除した時に、親モデルと関連している子モデルに対する挙動を指定するオプション

# Active Storage
ファイルアップロード機能を簡単に実装できるGem

# ImageMagick
コマンドラインから画像に処理を加えることができるツール

# MiniMagick
ImageMagickの機能をRubyで扱えるようにしてくれるGem

# ImageProcessing
MiniMagickでは提供できない、画像サイズを調整する機能を提供するGem

#  has_one_attachedハズ ワン アタッチドメソッド
各レコードとファイルを1対1の関係で紐づけるメソッド

# image_tagイメージ タグメソッド
img要素を生成するRailsのヘルパーメソッド

#  attached?アタッチドメソッド
レコードにファイルが添付されているかどうかで、trueかfalseを返すメソッド

# variantバリアントメソッド
Active Storageを導入している場合に使用可能なメソッドです。
variantメソッドを使用することで、ファイルの表示サイズを指定できます。

# afterアフターメソッド

# Rails.root.join
Rails.rootとすると、このRailsアプリケーションのトップ階層のディレクトリまでの絶対パスを取得できます。パスの情報に対してjoinメソッドを利用することで、引数として渡した文字列でのパス情報を、Rails.rootのパスの情報につけることができます。

# attach_fileアタッチ ファイルメソッド
タイプがfileのinput要素、つまり画像などのアップロード用のinput要素に、画像投稿のテスト用の画像を添付（アタッチ）できるメソッド

# create_list
FactoryBotの設定ファイルに存在しているレコードを、複数作成したい場合に使用するメソッドです。
create_listを用いることで、一度に複数のテストデータを生成できます。


