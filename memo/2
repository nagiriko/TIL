
# DRY（Don’t Repeat Yourself）
同じ情報を繰り返し定義しない

# CoC（Convention Over Configuration）
「設定よりも規約を優先する」

# Action View
ビューの機能を実現するために必要な処理のオブジェクト

# モジュール
インスタンスを生成できないクラス

# レンダリング
指定したHTMLなどのビューファイルを画面に描画すること

# JSON（JavaScript Object Notation）
データを扱う場合のフォーマット

# サービスクラス
コントローラー内のコードの可読性を高めるために用いる概念
複雑な処理はサービスクラスに切り出していきましょう

# セッション
Webサービスにおいて情報を一時的に記憶しておく仕組み

# session
Ruby on Railsでセッションを使用する際に使うオブジェクト
  session[:sample] = 1

# クッキー
ブラウザが持っている、データを保存できる領域

# CookieStore
Ruby on Railsでセッションを用いる際の、デフォルトの保存先です。この保存先はセッションストレージと呼ぶことが一般的です。

# Active Model
Ruby on Railsのアプリケーションにおいて、モデルの機能を実現するために必要なオブジェクトのこと

# Callbacksコールバックスモジュール
データ保存時などの任意のタイミングで実行する処理を設定できるモジュール

# Validationsバリデーションズモジュール
Validationsモジュールは、データの保存時に検証するような役割があり、これもActive Modelのモジュールです。

# Serializationシリアライゼーションモジュール
JSONなどで返却される値を整えることができるモジュール

# Formフォームオブジェクト
フォームに関する処理を切り出す仕組みのことで、大きく2つの場合に使用します。
1つ目は、フォームから入力された値が複数のモデルに関連するデータであり、一度に複数モデルを操作して、それぞれのデータを更新したい場合。
2つ目は、フォームから入力された値に対応するモデルは無いものの、バリデーションをかけたい場合です。

# ORM（Object Relational Mapping）
ORMとはRDB（リレーショナルデータベース）のデータを、オブジェクト指向プログラミング言語でオブジェクトとして使用するために変換する技術です。
Ruby on RailsのActiveRecordを始め、PHPのフレームワークであるLaravelのEloquentなどさまざまな種類があります。

# SQL（Structured Query Language）
RDBの操作を行うための言語
データを定義するDDL（Data Definition Language）
データを操作するDML（Data Manipulation Language）
データを制御するDCL（Data Control Language）

# find_by_sqlファインド バイ エスキューエルメソッド
find_by_sqlメソッドは、Ruby on RailsでSQL文を使用し、データを検索し取得する際に使用するメソッドです。

# var
varは再定義、再代入可能な古い書き方です。varの特徴として、再代入、再定義ともに可能です。

# const
constは、後から書き換えることができない変数を定義する書き方です。constの特徴として、再代入、再定義ともに不可という制約があります。

# let
letは、後で書き換えることができる変数を定義する書き方です。letの特徴として、再代入は可能ですが、再定義は不可という制約があります。

# テンプレートリテラル
テンプレートリテラルは、JavaScriptの構文です。ダブルクォートやシングルクォートの代わりにバッククォートで囲むことで、文字列内に挿入することができます。

# forフォー文
繰り返し処理を行う際にfor文を使います。

# forEachフォーイーチ関数

# function
関数を定義することができます。functionに続けて関数の名前を記述します。そして、( )のなかに引数を、{ }のなかに処理を書きます。
注意点として、引数がない場合にも()を記述する必要があります

関数宣言	標準的な関数の定義。
無名関数	関数を多く使用するコードであるときに使用する。関数名の重複を避けることができる。
即時関数	流用する可能性のない関数を定義するときに使用する。別途関数を定義する手間がない。
アロー関数	無名関数または即時関数において、より省略した記述をしたい時に使用する。

# 関数宣言
function 関数名( 引数 ){
  // 関数内の処理
}

# 関数式
変数 = function( 引数 ){
  // 関数内の処理
}

# 無名関数
// 関数式（無名関数）
const hello = function(){
  console.log('hello')
}

# 即時関数
関数を定義すると同時に実行される構文
// 即時関数
(function countNum(num) {
  console.log(num)
})(1)

# アロー関数
// アロー関数
const 変数名 = () => {
  処理
}

# プロパティ
ハッシュ形式（キーとバリューの組み合わせ）で書かれる値のことで、オブジェクトの要素（中身）を決める役割をします。つまり、「オブジェクトは、プロパティの集合体から成り立っている」と言うことができます。

# windowウィンドウオブジェクト
ブラウザの情報を持っているオブジェクトです。ブラウザの情報をもつため、ブラウザオブジェクトと呼ばれます。

# documentドキュメントオブジェクト
ブラウザ上で表示された情報(HTML)を操作する事ができるオブジェクト

# DOM（Document Object Model）
HTMLを解析しデータを作成する仕組み

# document.getElementById("id名")
DOMツリーから特定のHTMLの要素を取得するためのメソッドの1つです。引数に渡したidを持つ要素を取得します。

# document.getElementsByClassName("class名")
classを指定して取得する際はこちらを利用します。ここで気をつけたいのは、getElementsと複数形になっていることです。

# document.querySelectorAll("セレクタ名")
セレクタ名とは、CSSでスタイルを適用するために指定している要素です。セレクタ名を指定して取得する場合、querySelectorAllメソッドを使用します。HTML上から、引数で指定したセレクタに合致するものをすべて取得します。

# scriptスクリプト要素
実行できるコードを埋め込んだり参照したりするために使用されるHTML

# イベント
HTMLに対して行われた処理の要求のこと

loadイベント	ページ全体が全て読み込まれた後に、イベント発火する
clickイベント	指定された要素がクリックされた時に、イベントが発火する
mouseoverイベント	マウスカーソルが指定された要素上に乗った時に、イベントが発火する
mouseoutイベント	マウスカーソルが指定された要素上から外れた時に、イベントが発火する

# addEventListener()アドイベントリスナーメソッド
イベント発火の際に実行する関数を定義するためのメソッド

# インラインスタイル
HTML要素の開始タグの中に直接CSSのソースコードを記述するプロパティの指定方法

# setAttributeセット アトリビュートメソッド
指定した要素上に新しい属性を追加、または既存の属性の値を変更します。

# removeAttributeリムーブ アトリビュートメソッド
指定した要素から、特定の属性を削除

# this
イベント発火元となった要素を取得することができます。

# debugger
ソースコードに処理を一旦停止させる場所を指定することができます。

# innerHTMLインナー エイチティーエムエルプロパティ
HTML要素の取得や書き換えを行うことができます

# Ajax（Asynchronous JavaScript + XML）エージャックス（エイシンクロナス ジャバスクリプト + エックスエムエル）
ブラウザ上で非同期通信を利用して、ページの内容を更新する通信技術

# FormDataフォームデータオブジェクト
フォームに入力された値を取得できるオブジェクト

# XMLHttpRequestエックスエムエル エイチティーティーピー リクエストオブジェクト
JavaScriptを用いてサーバーとHTTP通信を行うときに利用するオブジェクト

# open()オープンメソッド
リクエストを初期化するメソッド
XHR.open("POST", "/posts", true);
第一引数	HTTPメソッドの指定	POST
第二引数	パスの指定	/posts
第三引数	非同期通信のON/OFF	true

# データフォーマット
リクエストやレスポンスをはじめとしたデータのやり取りを行う際に使われるデータの型のこと

# responseTypeレスポンスタイププロパティ
レスポンスのデータフォーマット（＝どのような形式のデータにするか）を指定するプロパティ

# JSON（JavaScript Object Notation）
JavaScriptをもとにして構成されたデータフォーマット

# send()センドメソッド
リクエストを送信するメソッド

# preventDefault()プリベントデフォルトメソッド
既定のイベントを無効化するためのメソッド

# onloadオンロードプロパティ
リクエストの送信が成功したときに呼び出されるプロパティ

# responseレスポンスプロパティ
サーバーからのレスポンスに関する情報が格納されたプロパティ

# insertAdjacentHTMLインサート アジェイセント エイチティーエムエルメソッド
HTMLをある要素の指定した箇所に挿入するメソッド
<挿入したい要素名>.insertAdjacentHTML(挿入したい位置,挿入したいHTML);

beforebegin	要素の直前
afterbegin	要素内部の、最初の子要素の直前
beforeend	要素内部の、最後の子要素の直後
afterend	要素の直後

# HTTPエイチティーティーピーステータスコード
特定のHTTPリクエストが正常に完了したかどうかを示した、サーバーからクライアントに送信される番号のこと

100〜199	リクエスト継続中
200〜299	リクエストが成功した
300〜399	リダイレクト中
400〜499	クライアントでエラーが発生している
500〜599	サーバーでエラーが発生している

# API（Application Programming Interface）
主にアプリケーション同士がデータをやりとりする場合に使用する一定のルール、仕組みのこと

# WebAPI
HTTP/HTTPS通信を使用して利用するAPIのこと

# ネイティブアプリケーション
スマートフォンやタブレットを使用してApp StoreやGoogle Play Storeでダウンロードできるアプリ
iOS	Objective-C, Swift
android	Java, Kotlin

# authenticate_or_request_with_http_basicオウセンティケイト オア リクエスト ウィズ エイチティティーピー ベーシックメソッド
RailsアプリケーションでBasic認証を実装するために使用する、Railsのメソッド

# zsh
ログインシェルと呼ばれるもので、プログラムを実行する時に、ユーザーの要求に一番最初に対応する役割を担います
隠しファイルなので、特別な設定なしではFinderなどには表示されていません。
環境変数を記載する場所は、設定ファイルである「.zshrc」の中です。

設定ファイルは、vimというコマンドを用いて編集します。

# vimヴィム
「vim」とは、サーバー上で使用できるテキストエディタです。vimコマンドを用いることで、指定したファイルの編集をターミナルから行うことが可能です。
以下が使用例になります。
:w	作成・編集したファイルを保存します。
:q	vimを終了します。
:q!	編集した内容を保存しないでvimを強制終了します。
:wq	編集した内容を保存してvimを強制終了します。
